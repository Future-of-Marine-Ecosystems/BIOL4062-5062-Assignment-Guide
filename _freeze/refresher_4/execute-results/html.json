{
  "hash": "04e9cc2417177b1c0a98bec534625b18",
  "result": {
    "engine": "knitr",
    "markdown": "# R Refresher Part 4: Indexing\n\n## Created by Mauricio Cantor, with modifications by Laura J. Feyrer, Ana Eguiguren, and Reid Steele\n\nThis section covers indexing, which are methods by which you can access subsets of a data structure. Indexing serves as key fundamental of coding, which is incredibly useful in a wide range of situations.\n\n*NOTE:* On refresher pages, some code lines will be commented out to avoid file structure issues surrounding saving files, downloading packages, and changing working directories.\n\n## Square Brackets\n\nMost indexing in R is performed through the use of square brackets. as vectors are one-dimensional, they are indexed using a scalar value inside `[]`. Two-dimensional data structures are indexed via `[row,column]`. Two-dimensional data structures can also be indexed using just `[]`, in which they will go in order of individual elements, but this is more commonly done by mistake than to achieve as a desired outcome. Lists are indexed using `[[]]`. Square brackets can also be stacked together - for instance, `data_frame[1,][2]` would pull out the second element of the first column of the object `data_frame`. This is equivalent to `data_frame[1,2]`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4. Accessing bits of data: indexing ------------------------------------------\n\n# Ok, now you have your objects, your own data in R.\n# How do you access them?\n# First thing: make sure they exist...\na <- c(2,4,7,8)\nnum_vector <- c(3,6,9,12,15)\nmy_matrix1 <-  matrix(1:6, 2, 3, byrow = T)# data, rows, columns\nchar_vector <- c(\"Data\", \"analysis\", \"fun\")\nchar_vector2 <- c(\"Data\", \"analysis\", 1)\nmy_df <- data.frame(test = char_vector, char_vector2)\nmy_list <- list(a, num_vector, char_vector, my_df)\nscho <- read.csv(\"Schoenemann.csv\", header=T)\n\nnum_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  6  9 12 15\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_matrix1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 2 4 7 8\n\n[[2]]\n[1]  3  6  9 12 15\n\n[[3]]\n[1] \"Data\"     \"analysis\" \"fun\"     \n\n[[4]]\n      test char_vector2\n1     Data         Data\n2 analysis     analysis\n3      fun            1\n```\n\n\n:::\n\n```{.r .cell-code}\nscho\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Order           Family         Genus        Species Location    Mass\n1    Carnivora          Felidae         Felis     canadensis   Alaska 7688.00\n2    Carnivora          Felidae         Felis          rufus Virginia 6152.00\n3    Carnivora       Mustelidae          Gulo         luscus   Alaska 9362.00\n4    Carnivora       Mustelidae       Mustela        erminea   Alaska  183.30\n5    Carnivora       Mustelidae       Mustela          vison Virginia 1032.00\n6    Carnivora       Proyonidae       Procyon          lotor Virginia 6040.00\n7   Chiroptera       Molossidae      Molossus          major   Brazil   11.07\n8   Chiroptera   Phyllostomidae      Artibeus    jamaicensis   Brazil   40.47\n9   Chiroptera   Phyllostomidae      Artibeus      lituratus   Brazil   63.65\n10  Chiroptera   Phyllostomidae   Glossophaga       soricina   Brazil    7.22\n11  Chiroptera   Phyllostomidae  Phyllostomus       discolor   Brazil   34.37\n12  Chiroptera   Phyllostomidae  Phyllostomus       hastatus   Brazil   92.26\n13  Chiroptera   Phyllostomidae      Sturnira         lilium   Brazil   15.39\n14  Chiroptera   Phyllostomidae     Vampyrops       lineatus   Brazil   22.03\n15  Chiroptera Vespertilionidae     Eptesicus         fuscus Virginia   17.88\n16    Edentata      Dasypodidae    Euphractos     sexcinctus   Brazil 2459.00\n17 Insectivora         Talpidae      Scalopus      aquaticus Virginia   44.64\n18  Lagomorpha      Ochotonidae      Ochotona       collaris   Alaska  120.90\n19 Marsupialia     Didelphiidae     Didelphis    marsupialis Virginia 1411.00\n20    Primates  Calllitrichidae    Callithrix        jacchus   Brazil  186.00\n21    Rodentia       Castoridae        Castor     canadensis Virginia 9331.00\n22    Rodentia       Cricetidae Clethrionomys        gapperi Virginia   18.34\n23    Rodentia       Cricetidae Clethrionomys        rutilus   Alaska   25.27\n24    Rodentia       Cricetidae        Lemmus  trimucronatus   Alaska   41.62\n25    Rodentia       Cricetidae      Microtus pennsylvanicus Virginia   31.38\n26    Rodentia       Cricetidae      Microtus      oeconomus   Alaska   24.83\n27    Rodentia       Cricetidae      Microtus      pinetorum Virginia   19.41\n28    Rodentia       Cricetidae       Ondatra      zibethica Virginia 1180.00\n29    Rodentia       Cricetidae      Oryzomys      palustris Virginia   61.62\n30    Rodentia       Cricetidae    Peromyscus       leucopus Virginia   16.99\n31    Rodentia      Cuniculidae     Cuniculus           paca   Brazil 1565.00\n32    Rodentia    Dasyproctidae    Dasyprocta          aguti   Brazil 2097.00\n33    Rodentia   Erethizontidae     Erethizon       dorsatum Virginia 5339.00\n34    Rodentia          Muridae           Mus       musculus Virginia   15.88\n35    Rodentia        Sciuridae      Citellus      undulatus   Alaska  479.00\n36    Rodentia        Sciuridae       Marmota       caligata   Alaska 3558.00\n37    Rodentia        Sciuridae       Marmota          monax   Alaska 2194.00\n38    Rodentia        Sciuridae       Sciurus   carolinensis Virginia  499.00\n39    Rodentia        Sciuridae  Tamiasciurus     hudsonicus   Alaska  192.80\n       Fat    FFWT    CNS HEART  MUSCLE   BONE\n1  1120.00 6568.00 105.09 27.59 4341.45 631.18\n2   738.00 5414.00  81.75 25.45 3600.31 552.23\n3   562.00 8800.00  85.36 80.96 5271.20 879.12\n4     3.10  180.20   6.69  1.87  104.70  21.98\n5    66.00  966.00  18.06  7.63  581.53  80.27\n6  1013.00 5027.00  58.31 36.19 2920.69 517.78\n7     0.22   10.89   0.35  0.15    5.51   1.36\n8     3.79   36.18   0.96  0.47   18.02   4.48\n9     6.22   57.19   1.21  0.74   29.05   8.09\n10    0.25    7.15   0.37  0.10    3.86   0.69\n11    2.38   32.20   1.00  0.36   16.49   3.87\n12    5.41   87.05   2.10  0.89   47.01  11.75\n13    1.21   14.25   0.62  0.16    6.33   2.04\n14    1.59   20.24   0.76  0.24   10.59   2.23\n15    1.51   16.37   0.32  0.19    7.43   2.26\n16  252.20 2123.00  19.32 12.95  864.06 269.20\n17    1.23   43.41   1.01  0.34   21.88   5.30\n18    7.00  113.90   3.06  0.73   57.18  11.32\n19  107.00 1304.00   7.56  7.56  681.99 203.42\n20    8.70  176.20   7.56  1.22   87.92  26.69\n21  865.00 8466.00  53.34 27.94 4622.44 897.40\n22    0.14   18.20   0.64  0.13    9.25   2.22\n23    0.72   24.55   0.60  0.19   11.34   1.94\n24    0.75   40.87   1.03  0.28   19.94   3.82\n25    1.20   30.18   0.76  0.26   14.46   2.59\n26    0.45   24.38   0.67  0.19   11.12   2.44\n27    0.45   18.96   0.57  0.15    9.46   1.86\n28   86.00 1094.00   7.11  3.50  679.37 115.96\n29    7.88   53.74   1.11  0.34   26.92   5.33\n30    0.59   16.40   0.61  0.17    8.02   1.49\n31  196.50 1368.00  29.00  7.80  737.35 140.90\n32  263.40 1833.80  25.86 13.94 1115.13 168.53\n33  674.00 4725.00  37.80 24.10 2197.13 576.45\n34    0.96   14.92   0.48  0.15    7.07   1.22\n35   21.00  458.00   6.00  2.56  257.85  38.01\n36  749.00 2809.00  20.37 16.57 1671.36 257.02\n37  536.50 1657.50  12.73  8.11  817.13 149.49\n38   11.00  488.00   8.88  2.83  306.46  51.73\n39    3.80  189.00   5.50  1.68  114.16  18.16\n```\n\n\n:::\n\n```{.r .cell-code}\n# Each type of object has a specific way to manipulating \n# its values.\n# Let's start with vectors: square brackets []\nnum_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  6  9 12 15\n```\n\n\n:::\n\n```{.r .cell-code}\nnum_vector[1] # the first element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nnum_vector[5] # the 5th element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\nnum_vector[8] # there's only five, right?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# you can change specific entries of your vector:\nnum_vector[1] <- 6\n\nnum_vector[2] <- NA \n\nnum_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6 NA  9 12 15\n```\n\n\n:::\n\n```{.r .cell-code}\n# Matrices: square brackets and commas [,] i.e. [row, column]\nmy_matrix1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_matrix1[1,1] # first cell, row 1, column 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_matrix1[1,] # first row\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_matrix1[,1] # first column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 4\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_matrix1[5,5] # out of bounds!\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in my_matrix1[5, 5]: subscript out of bounds\n```\n\n\n:::\n\n```{.r .cell-code}\n# Lists: double square brackets [[]]\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 2 4 7 8\n\n[[2]]\n[1]  3  6  9 12 15\n\n[[3]]\n[1] \"Data\"     \"analysis\" \"fun\"     \n\n[[4]]\n      test char_vector2\n1     Data         Data\n2 analysis     analysis\n3      fun            1\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list[[1]] # that's our x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 7 8\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list[[2]] # that's our num_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  6  9 12 15\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list[[3]] # that's our matrix1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Data\"     \"analysis\" \"fun\"     \n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list[[2]][2] # that's the second element of the vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_list[[4]][,2] # that's the third column of the dataframe ...\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Data\"     \"analysis\" \"1\"       \n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Dollar Sign\n\nThe `$` operator in R divides objects into their component parts, and can be used to pull out a desired part of an object using its name. `$` indexes column names for 2 dimensional data structures, and pulls out individual named items of lists. `attach()` can be used to move the components of an object into the workspace, which can later be undone using `detach()`. See the example below for its usage.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data frame: dollar sign $ to access the columns, typing the column names\nscho$Mass\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 7688.00 6152.00 9362.00  183.30 1032.00 6040.00   11.07   40.47   63.65\n[10]    7.22   34.37   92.26   15.39   22.03   17.88 2459.00   44.64  120.90\n[19] 1411.00  186.00 9331.00   18.34   25.27   41.62   31.38   24.83   19.41\n[28] 1180.00   61.62   16.99 1565.00 2097.00 5339.00   15.88  479.00 3558.00\n[37] 2194.00  499.00  192.80\n```\n\n\n:::\n\n```{.r .cell-code}\n# or...you can use the functions 'attach()' and 'detach()':\nattach(scho) # scho was copied to the workspace; the column names became objects and we can simply access them by typing their names\nMass\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 7688.00 6152.00 9362.00  183.30 1032.00 6040.00   11.07   40.47   63.65\n[10]    7.22   34.37   92.26   15.39   22.03   17.88 2459.00   44.64  120.90\n[19] 1411.00  186.00 9331.00   18.34   25.27   41.62   31.38   24.83   19.41\n[28] 1180.00   61.62   16.99 1565.00 2097.00 5339.00   15.88  479.00 3558.00\n[37] 2194.00  499.00  192.80\n```\n\n\n:::\n\n```{.r .cell-code}\n# but remember to 'detach' your dataframe when your done:\ndetach(scho)\nMass # see? an error, R doesn't recognize it anymore\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'Mass' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# you can also call single datapoints of a dataframe:\nscho$Mass[5] # gives you the 5th mass entry\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1032\n```\n\n\n:::\n\n```{.r .cell-code}\nscho$Mass[5] <- NA # assign a new value to that entry\nscho$Mass\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 7688.00 6152.00 9362.00  183.30      NA 6040.00   11.07   40.47   63.65\n[10]    7.22   34.37   92.26   15.39   22.03   17.88 2459.00   44.64  120.90\n[19] 1411.00  186.00 9331.00   18.34   25.27   41.62   31.38   24.83   19.41\n[28] 1180.00   61.62   16.99 1565.00 2097.00 5339.00   15.88  479.00 3558.00\n[37] 2194.00  499.00  192.80\n```\n\n\n:::\n\n```{.r .cell-code}\n# RS Note: You can also use $ to create new columns\nscho$Potato = 'Potato'\nscho$Potato\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n [9] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n[17] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n[25] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n[33] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Indexing methods\n\nThere are many, many, MANY different ways to index things in R, using numerical, categorical, character, and logical methods. There are also various functions designed specifically for indexing, such as `which()`. Take a look through all the examples below and think about what types of indexing feel the best for you, when you might use them, and what you might use them for.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscho[5,] #gives you the 5th row\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Order     Family   Genus Species Location Mass Fat FFWT   CNS HEART\n5 Carnivora Mustelidae Mustela   vison Virginia   NA  66  966 18.06  7.63\n  MUSCLE  BONE Potato\n5 581.53 80.27 Potato\n```\n\n\n:::\n\n```{.r .cell-code}\nscho[,5] #gives you the 5th column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Alaska\"   \"Virginia\" \"Alaska\"   \"Alaska\"   \"Virginia\" \"Virginia\"\n [7] \"Brazil\"   \"Brazil\"   \"Brazil\"   \"Brazil\"   \"Brazil\"   \"Brazil\"  \n[13] \"Brazil\"   \"Brazil\"   \"Virginia\" \"Brazil\"   \"Virginia\" \"Alaska\"  \n[19] \"Virginia\" \"Brazil\"   \"Virginia\" \"Virginia\" \"Alaska\"   \"Alaska\"  \n[25] \"Virginia\" \"Alaska\"   \"Virginia\" \"Virginia\" \"Virginia\" \"Virginia\"\n[31] \"Brazil\"   \"Brazil\"   \"Virginia\" \"Virginia\" \"Alaska\"   \"Alaska\"  \n[37] \"Alaska\"   \"Virginia\" \"Alaska\"  \n```\n\n\n:::\n\n```{.r .cell-code}\n# RS Note: You can also index things you don't want instead of things you do want using != and -\nscho[,-5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Order           Family         Genus        Species    Mass     Fat\n1    Carnivora          Felidae         Felis     canadensis 7688.00 1120.00\n2    Carnivora          Felidae         Felis          rufus 6152.00  738.00\n3    Carnivora       Mustelidae          Gulo         luscus 9362.00  562.00\n4    Carnivora       Mustelidae       Mustela        erminea  183.30    3.10\n5    Carnivora       Mustelidae       Mustela          vison      NA   66.00\n6    Carnivora       Proyonidae       Procyon          lotor 6040.00 1013.00\n7   Chiroptera       Molossidae      Molossus          major   11.07    0.22\n8   Chiroptera   Phyllostomidae      Artibeus    jamaicensis   40.47    3.79\n9   Chiroptera   Phyllostomidae      Artibeus      lituratus   63.65    6.22\n10  Chiroptera   Phyllostomidae   Glossophaga       soricina    7.22    0.25\n11  Chiroptera   Phyllostomidae  Phyllostomus       discolor   34.37    2.38\n12  Chiroptera   Phyllostomidae  Phyllostomus       hastatus   92.26    5.41\n13  Chiroptera   Phyllostomidae      Sturnira         lilium   15.39    1.21\n14  Chiroptera   Phyllostomidae     Vampyrops       lineatus   22.03    1.59\n15  Chiroptera Vespertilionidae     Eptesicus         fuscus   17.88    1.51\n16    Edentata      Dasypodidae    Euphractos     sexcinctus 2459.00  252.20\n17 Insectivora         Talpidae      Scalopus      aquaticus   44.64    1.23\n18  Lagomorpha      Ochotonidae      Ochotona       collaris  120.90    7.00\n19 Marsupialia     Didelphiidae     Didelphis    marsupialis 1411.00  107.00\n20    Primates  Calllitrichidae    Callithrix        jacchus  186.00    8.70\n21    Rodentia       Castoridae        Castor     canadensis 9331.00  865.00\n22    Rodentia       Cricetidae Clethrionomys        gapperi   18.34    0.14\n23    Rodentia       Cricetidae Clethrionomys        rutilus   25.27    0.72\n24    Rodentia       Cricetidae        Lemmus  trimucronatus   41.62    0.75\n25    Rodentia       Cricetidae      Microtus pennsylvanicus   31.38    1.20\n26    Rodentia       Cricetidae      Microtus      oeconomus   24.83    0.45\n27    Rodentia       Cricetidae      Microtus      pinetorum   19.41    0.45\n28    Rodentia       Cricetidae       Ondatra      zibethica 1180.00   86.00\n29    Rodentia       Cricetidae      Oryzomys      palustris   61.62    7.88\n30    Rodentia       Cricetidae    Peromyscus       leucopus   16.99    0.59\n31    Rodentia      Cuniculidae     Cuniculus           paca 1565.00  196.50\n32    Rodentia    Dasyproctidae    Dasyprocta          aguti 2097.00  263.40\n33    Rodentia   Erethizontidae     Erethizon       dorsatum 5339.00  674.00\n34    Rodentia          Muridae           Mus       musculus   15.88    0.96\n35    Rodentia        Sciuridae      Citellus      undulatus  479.00   21.00\n36    Rodentia        Sciuridae       Marmota       caligata 3558.00  749.00\n37    Rodentia        Sciuridae       Marmota          monax 2194.00  536.50\n38    Rodentia        Sciuridae       Sciurus   carolinensis  499.00   11.00\n39    Rodentia        Sciuridae  Tamiasciurus     hudsonicus  192.80    3.80\n      FFWT    CNS HEART  MUSCLE   BONE Potato\n1  6568.00 105.09 27.59 4341.45 631.18 Potato\n2  5414.00  81.75 25.45 3600.31 552.23 Potato\n3  8800.00  85.36 80.96 5271.20 879.12 Potato\n4   180.20   6.69  1.87  104.70  21.98 Potato\n5   966.00  18.06  7.63  581.53  80.27 Potato\n6  5027.00  58.31 36.19 2920.69 517.78 Potato\n7    10.89   0.35  0.15    5.51   1.36 Potato\n8    36.18   0.96  0.47   18.02   4.48 Potato\n9    57.19   1.21  0.74   29.05   8.09 Potato\n10    7.15   0.37  0.10    3.86   0.69 Potato\n11   32.20   1.00  0.36   16.49   3.87 Potato\n12   87.05   2.10  0.89   47.01  11.75 Potato\n13   14.25   0.62  0.16    6.33   2.04 Potato\n14   20.24   0.76  0.24   10.59   2.23 Potato\n15   16.37   0.32  0.19    7.43   2.26 Potato\n16 2123.00  19.32 12.95  864.06 269.20 Potato\n17   43.41   1.01  0.34   21.88   5.30 Potato\n18  113.90   3.06  0.73   57.18  11.32 Potato\n19 1304.00   7.56  7.56  681.99 203.42 Potato\n20  176.20   7.56  1.22   87.92  26.69 Potato\n21 8466.00  53.34 27.94 4622.44 897.40 Potato\n22   18.20   0.64  0.13    9.25   2.22 Potato\n23   24.55   0.60  0.19   11.34   1.94 Potato\n24   40.87   1.03  0.28   19.94   3.82 Potato\n25   30.18   0.76  0.26   14.46   2.59 Potato\n26   24.38   0.67  0.19   11.12   2.44 Potato\n27   18.96   0.57  0.15    9.46   1.86 Potato\n28 1094.00   7.11  3.50  679.37 115.96 Potato\n29   53.74   1.11  0.34   26.92   5.33 Potato\n30   16.40   0.61  0.17    8.02   1.49 Potato\n31 1368.00  29.00  7.80  737.35 140.90 Potato\n32 1833.80  25.86 13.94 1115.13 168.53 Potato\n33 4725.00  37.80 24.10 2197.13 576.45 Potato\n34   14.92   0.48  0.15    7.07   1.22 Potato\n35  458.00   6.00  2.56  257.85  38.01 Potato\n36 2809.00  20.37 16.57 1671.36 257.02 Potato\n37 1657.50  12.73  8.11  817.13 149.49 Potato\n38  488.00   8.88  2.83  306.46  51.73 Potato\n39  189.00   5.50  1.68  114.16  18.16 Potato\n```\n\n\n:::\n\n```{.r .cell-code}\n# RS Note: You can also index using row/column name text\nscho[,'Potato']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n [9] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n[17] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n[25] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n[33] \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\" \"Potato\"\n```\n\n\n:::\n\n```{.r .cell-code}\nscho = scho[,colnames(scho) != 'Potato']\n\n# RS Note: I recommend avoiding using numbers to index as much as humanly possible\n# Using numbers to index like this is called hard coding\n# If your data changes, your code will no longer work as intended\ntest = scho\ntest[,5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Alaska\"   \"Virginia\" \"Alaska\"   \"Alaska\"   \"Virginia\" \"Virginia\"\n [7] \"Brazil\"   \"Brazil\"   \"Brazil\"   \"Brazil\"   \"Brazil\"   \"Brazil\"  \n[13] \"Brazil\"   \"Brazil\"   \"Virginia\" \"Brazil\"   \"Virginia\" \"Alaska\"  \n[19] \"Virginia\" \"Brazil\"   \"Virginia\" \"Virginia\" \"Alaska\"   \"Alaska\"  \n[25] \"Virginia\" \"Alaska\"   \"Virginia\" \"Virginia\" \"Virginia\" \"Virginia\"\n[31] \"Brazil\"   \"Brazil\"   \"Virginia\" \"Virginia\" \"Alaska\"   \"Alaska\"  \n[37] \"Alaska\"   \"Virginia\" \"Alaska\"  \n```\n\n\n:::\n\n```{.r .cell-code}\ntest = cbind('Carrot', test)\ntest[,5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"canadensis\"     \"rufus\"          \"luscus\"         \"erminea\"       \n [5] \"vison\"          \"lotor\"          \"major\"          \"jamaicensis\"   \n [9] \"lituratus\"      \"soricina\"       \"discolor\"       \"hastatus\"      \n[13] \"lilium\"         \"lineatus\"       \"fuscus\"         \"sexcinctus\"    \n[17] \"aquaticus\"      \"collaris\"       \"marsupialis\"    \"jacchus\"       \n[21] \"canadensis\"     \"gapperi\"        \"rutilus\"        \"trimucronatus\" \n[25] \"pennsylvanicus\" \"oeconomus\"      \"pinetorum\"      \"zibethica\"     \n[29] \"palustris\"      \"leucopus\"       \"paca\"           \"aguti\"         \n[33] \"dorsatum\"       \"musculus\"       \"undulatus\"      \"caligata\"      \n[37] \"monax\"          \"carolinensis\"   \"hudsonicus\"    \n```\n\n\n:::\n\n```{.r .cell-code}\n# conditional indexing\n# sometimes you want to extract the datapoints that meet certain\n# conditions\n\nscho$Mass[which(scho$Mass < 100)]# get the values that meet a condition\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 11.07 40.47 63.65  7.22 34.37 92.26 15.39 22.03 17.88 44.64 18.34 25.27\n[13] 41.62 31.38 24.83 19.41 61.62 16.99 15.88\n```\n\n\n:::\n\n```{.r .cell-code}\nwhich(scho$Mass < 100)# get the index of rows that meet a condition\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  7  8  9 10 11 12 13 14 15 17 22 23 24 25 26 27 29 30 34\n```\n\n\n:::\n\n```{.r .cell-code}\nwhich(is.na(scho$Mass)) # RS Note: Return indexes where scho$Mass = NA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\n# you can create a new dataframe that includes only rows that\n# meet a certain condition:\n\nscho_big <- scho[-which(scho$Mass<100),]\n#this means that scho_big will include all the rows of scho\n# Except those whose weight is less than 100. \n# the \"-\" sign excludes rows\n\nscho_clean <- scho[-which(is.na(scho$Mass)),]\n# here you are removing all rows that have NA'values\n\n# RS Note: There are different ways to do the same thing, remember there are no wrong answers!\n# Everyone has their own coding style/preferences. I would do the same thing like this:\nscho_clean2 <- scho[(is.na(scho$Mass)) == F,]\n\nscho_clean == scho_clean2 # Same result\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Order Family Genus Species Location Mass  Fat FFWT  CNS HEART MUSCLE BONE\n1   TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n2   TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n3   TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n4   TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n6   TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n7   TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n8   TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n9   TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n10  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n11  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n12  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n13  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n14  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n15  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n16  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n17  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n18  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n19  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n20  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n21  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n22  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n23  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n24  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n25  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n26  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n27  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n28  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n29  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n30  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n31  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n32  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n33  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n34  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n35  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n36  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n37  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n38  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n39  TRUE   TRUE  TRUE    TRUE     TRUE TRUE TRUE TRUE TRUE  TRUE   TRUE TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# you can also do a dataframe that only includes those instances:\nscho_small <- scho[which(scho$Mass<100),]\n\n\n\n# RS Section: Useful Indexers\n# Here are some useful indexing methods\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Rows\nmtcars[mtcars$cyl == 6,] # == means equal to\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nValiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nMerc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars[mtcars$cyl != 6,] # != means does not equal\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars[mtcars$cyl <=6,] # <= means less than or equal to (< is just less than)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nValiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars[mtcars$cyl >=6,] # >= means greater than or equal to (< is just greater than)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n```\n\n\n:::\n\n```{.r .cell-code}\n# which\ncyl6 = which(mtcars$cyl == 6)\ncyl6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  4  6 10 11 30\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars[cyl6,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nValiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nMerc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n```\n\n\n:::\n\n```{.r .cell-code}\n# which.min and which.max\nminwt = which.min(mtcars$wt) \nmaxwt = which.max(mtcars$wt)\nminwt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28\n```\n\n\n:::\n\n```{.r .cell-code}\nmaxwt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n\n```{.r .cell-code}\n# good for finding minimums/maximums in data\nmtcars[minwt,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              mpg cyl disp  hp drat    wt qsec vs am gear carb\nLotus Europa 30.4   4 95.1 113 3.77 1.513 16.9  1  1    5    2\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars[maxwt,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mpg cyl disp  hp drat    wt  qsec vs am gear carb\nLincoln Continental 10.4   8  460 215    3 5.424 17.82  0  0    3    4\n```\n\n\n:::\n\n```{.r .cell-code}\n# Which.min and which.max take the first result only, not for use on categorical data\nwhich.min(mtcars$cyl) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nwhich.max(mtcars$cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nwhich(mtcars$cyl == min(mtcars$cyl)) # use which instead for all results for categorical data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  3  8  9 18 19 20 21 26 27 28 32\n```\n\n\n:::\n\n```{.r .cell-code}\n# Text (string) metadata\nhead(PlantGrowth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  weight group\n1   4.17  ctrl\n2   5.58  ctrl\n3   5.18  ctrl\n4   6.11  ctrl\n5   4.50  ctrl\n6   4.61  ctrl\n```\n\n\n:::\n\n```{.r .cell-code}\n# grep matches partial strings\ntrts = grep('trt', PlantGrowth$group)\ntrts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n```\n\n\n:::\n\n```{.r .cell-code}\nPlantGrowth[trts,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   weight group\n11   4.81  trt1\n12   4.17  trt1\n13   4.41  trt1\n14   3.59  trt1\n15   5.87  trt1\n16   3.83  trt1\n17   6.03  trt1\n18   4.89  trt1\n19   4.32  trt1\n20   4.69  trt1\n21   6.31  trt2\n22   5.12  trt2\n23   5.54  trt2\n24   5.50  trt2\n25   5.37  trt2\n26   5.29  trt2\n27   4.92  trt2\n28   6.15  trt2\n29   5.80  trt2\n30   5.26  trt2\n```\n\n\n:::\n\n```{.r .cell-code}\n# grepl does the same, but outputs logical instead of numerical\ntrtsl = grepl('trt', PlantGrowth$group)\ntrtsl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nPlantGrowth[trtsl == TRUE,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   weight group\n11   4.81  trt1\n12   4.17  trt1\n13   4.41  trt1\n14   3.59  trt1\n15   5.87  trt1\n16   3.83  trt1\n17   6.03  trt1\n18   4.89  trt1\n19   4.32  trt1\n20   4.69  trt1\n21   6.31  trt2\n22   5.12  trt2\n23   5.54  trt2\n24   5.50  trt2\n25   5.37  trt2\n26   5.29  trt2\n27   4.92  trt2\n28   6.15  trt2\n29   5.80  trt2\n30   5.26  trt2\n```\n\n\n:::\n\n```{.r .cell-code}\n# gsub replaces the specified string with another specifed string, useful for removing things\ngsub('trt', '', PlantGrowth$group)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ctrl\" \"ctrl\" \"ctrl\" \"ctrl\" \"ctrl\" \"ctrl\" \"ctrl\" \"ctrl\" \"ctrl\" \"ctrl\"\n[11] \"1\"    \"1\"    \"1\"    \"1\"    \"1\"    \"1\"    \"1\"    \"1\"    \"1\"    \"1\"   \n[21] \"2\"    \"2\"    \"2\"    \"2\"    \"2\"    \"2\"    \"2\"    \"2\"    \"2\"    \"2\"   \n```\n\n\n:::\n\n```{.r .cell-code}\npotatoes = gsub('trt', 'POTATO', PlantGrowth$group)\nptatoes = gsub('O.*?', '', potatoes)\npotatoes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ctrl\"    \"ctrl\"    \"ctrl\"    \"ctrl\"    \"ctrl\"    \"ctrl\"    \"ctrl\"   \n [8] \"ctrl\"    \"ctrl\"    \"ctrl\"    \"POTATO1\" \"POTATO1\" \"POTATO1\" \"POTATO1\"\n[15] \"POTATO1\" \"POTATO1\" \"POTATO1\" \"POTATO1\" \"POTATO1\" \"POTATO1\" \"POTATO2\"\n[22] \"POTATO2\" \"POTATO2\" \"POTATO2\" \"POTATO2\" \"POTATO2\" \"POTATO2\" \"POTATO2\"\n[29] \"POTATO2\" \"POTATO2\"\n```\n\n\n:::\n\n```{.r .cell-code}\nptatoes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ctrl\"  \"ctrl\"  \"ctrl\"  \"ctrl\"  \"ctrl\"  \"ctrl\"  \"ctrl\"  \"ctrl\"  \"ctrl\" \n[10] \"ctrl\"  \"PTAT1\" \"PTAT1\" \"PTAT1\" \"PTAT1\" \"PTAT1\" \"PTAT1\" \"PTAT1\" \"PTAT1\"\n[19] \"PTAT1\" \"PTAT1\" \"PTAT2\" \"PTAT2\" \"PTAT2\" \"PTAT2\" \"PTAT2\" \"PTAT2\" \"PTAT2\"\n[28] \"PTAT2\" \"PTAT2\" \"PTAT2\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# %in%\nPlantGrowth[PlantGrowth$group %in% c('ctrl', 'trt1'),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   weight group\n1    4.17  ctrl\n2    5.58  ctrl\n3    5.18  ctrl\n4    6.11  ctrl\n5    4.50  ctrl\n6    4.61  ctrl\n7    5.17  ctrl\n8    4.53  ctrl\n9    5.33  ctrl\n10   5.14  ctrl\n11   4.81  trt1\n12   4.17  trt1\n13   4.41  trt1\n14   3.59  trt1\n15   5.87  trt1\n16   3.83  trt1\n17   6.03  trt1\n18   4.89  trt1\n19   4.32  trt1\n20   4.69  trt1\n```\n\n\n:::\n\n```{.r .cell-code}\n# and\nPlantGrowth[(PlantGrowth$weight < 5) & (PlantGrowth$group == 'ctrl'),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  weight group\n1   4.17  ctrl\n5   4.50  ctrl\n6   4.61  ctrl\n8   4.53  ctrl\n```\n\n\n:::\n\n```{.r .cell-code}\n# or\nPlantGrowth[(PlantGrowth$weight < 5) | (PlantGrowth$group == 'ctrl'),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   weight group\n1    4.17  ctrl\n2    5.58  ctrl\n3    5.18  ctrl\n4    6.11  ctrl\n5    4.50  ctrl\n6    4.61  ctrl\n7    5.17  ctrl\n8    4.53  ctrl\n9    5.33  ctrl\n10   5.14  ctrl\n11   4.81  trt1\n12   4.17  trt1\n13   4.41  trt1\n14   3.59  trt1\n16   3.83  trt1\n18   4.89  trt1\n19   4.32  trt1\n20   4.69  trt1\n27   4.92  trt2\n```\n\n\n:::\n\n```{.r .cell-code}\n# !\nPlantGrowth[!(PlantGrowth$group %in% c('ctrl', 'trt1')),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   weight group\n21   6.31  trt2\n22   5.12  trt2\n23   5.54  trt2\n24   5.50  trt2\n25   5.37  trt2\n26   5.29  trt2\n27   4.92  trt2\n28   6.15  trt2\n29   5.80  trt2\n30   5.26  trt2\n```\n\n\n:::\n\n```{.r .cell-code}\n# -\nPlantGrowth[-trts,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   weight group\n1    4.17  ctrl\n2    5.58  ctrl\n3    5.18  ctrl\n4    6.11  ctrl\n5    4.50  ctrl\n6    4.61  ctrl\n7    5.17  ctrl\n8    4.53  ctrl\n9    5.33  ctrl\n10   5.14  ctrl\n```\n\n\n:::\n:::\n",
    "supporting": [
      "refresher_4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}