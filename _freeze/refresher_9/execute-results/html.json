{
  "hash": "0a97723f40ed657e94a39978895c8174",
  "result": {
    "engine": "knitr",
    "markdown": "# R Refresher Part 9: Useful tidyr and dplyr functions\n\n## Created by Reid Steele\n\nThis section covers some useful functions from the tidyverse family, belonging to the `tidyr` and `dplyr` packages.\n\n*NOTE:* On refresher pages, some code lines will be commented out to avoid file structure issues surrounding saving files, downloading packages, and changing working directories.\n\n## Joins\n\nJoins are useful for combining two data frames which have a common column. These are particularly useful when working with databases, which often have separate data and metadata files.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##################################################################################################\n\n# 9. RS Section: Useful tidyr and dplyr functions\nlibrary(tidyr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\n# Joining\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n\n\n:::\n\n```{.r .cell-code}\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n\n\n:::\n\n```{.r .cell-code}\n# left_join matches values from first data frame and merges second data frame into it\nleft_join(band_members, band_instruments, by = 'name')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n\n\n:::\n\n```{.r .cell-code}\n# right_join does the same but in reverse\nright_join(band_members, band_instruments, by = 'name')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n\n\n:::\n\n```{.r .cell-code}\n# full_join fully joins both data frames\nfull_join(band_members, band_instruments, by = 'name')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Wide and long form data\n\nData is generally stored in one of two forms - long format, and wide format.\n\nWide format is likely the form you are used to. In wide format data, columns are used to distinguish different types of data. Most data you've seen or worked with in Excel is likely in wide format. It is called wide format because you have many columns and fewer rows.\n\nLong format data compresses all of the actual data values together into a single column, with different groups of data being distinguished with metadata identifiers. This makes a data structure with many rows and few columns - hence, long format. Long format data is common in databases, since it is much easier to add new rows to data structures than it is to add new columns.\n\nYou can switch between long and wide format data using the `pivot_longer` and `pivot_wider` `tidyr` functions. You may wish to do this because generally, base R functions and plotting work better with wide format data, while tidyverse and ggplot2 work better (or more often, exclusively) on long format data.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Wide and long form data:\n# Most data you have seen or worked with is likely in what is called 'wide format'\n# Wide format data is laid out in a grid format, and data is contained in multiple columns\n# Long format data compresses all data into a single column, which is defined by several metadata columns\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n\n```{.r .cell-code}\n# the mtcars dataset is in wide format - each individual data type has its own column, into which data is entered\n\n# pivot_longer changes data from wide format to long format\nmtcars_wide = cbind(car = rownames(mtcars), mtcars) # Make row names its own column so we can use it as a metadata column\nmtcars_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                    car  mpg cyl  disp  hp drat    wt  qsec vs\nMazda RX4                     Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0\nMazda RX4 Wag             Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0\nDatsun 710                   Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1\nHornet 4 Drive           Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1\nHornet Sportabout     Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0\nValiant                         Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1\nDuster 360                   Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0\nMerc 240D                     Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1\nMerc 230                       Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1\nMerc 280                       Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1\nMerc 280C                     Merc 280C 17.8   6 167.6 123 3.92 3.440 18.90  1\nMerc 450SE                   Merc 450SE 16.4   8 275.8 180 3.07 4.070 17.40  0\nMerc 450SL                   Merc 450SL 17.3   8 275.8 180 3.07 3.730 17.60  0\nMerc 450SLC                 Merc 450SLC 15.2   8 275.8 180 3.07 3.780 18.00  0\nCadillac Fleetwood   Cadillac Fleetwood 10.4   8 472.0 205 2.93 5.250 17.98  0\nLincoln Continental Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0\nChrysler Imperial     Chrysler Imperial 14.7   8 440.0 230 3.23 5.345 17.42  0\nFiat 128                       Fiat 128 32.4   4  78.7  66 4.08 2.200 19.47  1\nHonda Civic                 Honda Civic 30.4   4  75.7  52 4.93 1.615 18.52  1\nToyota Corolla           Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1\nToyota Corona             Toyota Corona 21.5   4 120.1  97 3.70 2.465 20.01  1\nDodge Challenger       Dodge Challenger 15.5   8 318.0 150 2.76 3.520 16.87  0\nAMC Javelin                 AMC Javelin 15.2   8 304.0 150 3.15 3.435 17.30  0\nCamaro Z28                   Camaro Z28 13.3   8 350.0 245 3.73 3.840 15.41  0\nPontiac Firebird       Pontiac Firebird 19.2   8 400.0 175 3.08 3.845 17.05  0\nFiat X1-9                     Fiat X1-9 27.3   4  79.0  66 4.08 1.935 18.90  1\nPorsche 914-2             Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.70  0\nLotus Europa               Lotus Europa 30.4   4  95.1 113 3.77 1.513 16.90  1\nFord Pantera L           Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0\nFerrari Dino               Ferrari Dino 19.7   6 145.0 175 3.62 2.770 15.50  0\nMaserati Bora             Maserati Bora 15.0   8 301.0 335 3.54 3.570 14.60  0\nVolvo 142E                   Volvo 142E 21.4   4 121.0 109 4.11 2.780 18.60  1\n                    am gear carb\nMazda RX4            1    4    4\nMazda RX4 Wag        1    4    4\nDatsun 710           1    4    1\nHornet 4 Drive       0    3    1\nHornet Sportabout    0    3    2\nValiant              0    3    1\nDuster 360           0    3    4\nMerc 240D            0    4    2\nMerc 230             0    4    2\nMerc 280             0    4    4\nMerc 280C            0    4    4\nMerc 450SE           0    3    3\nMerc 450SL           0    3    3\nMerc 450SLC          0    3    3\nCadillac Fleetwood   0    3    4\nLincoln Continental  0    3    4\nChrysler Imperial    0    3    4\nFiat 128             1    4    1\nHonda Civic          1    4    2\nToyota Corolla       1    4    1\nToyota Corona        0    3    1\nDodge Challenger     0    3    2\nAMC Javelin          0    3    2\nCamaro Z28           0    3    4\nPontiac Firebird     0    3    2\nFiat X1-9            1    4    1\nPorsche 914-2        1    5    2\nLotus Europa         1    5    2\nFord Pantera L       1    5    4\nFerrari Dino         1    5    6\nMaserati Bora        1    5    8\nVolvo 142E           1    4    2\n```\n\n\n:::\n\n```{.r .cell-code}\n# pivot mtcars_wide to long format\nmetadata_cols = colnames(mtcars_wide)[colnames(mtcars_wide) != 'car'] # Separate out metadata column\nmtcars_long = pivot_longer(mtcars_wide, \n                           cols = all_of(metadata_cols), \n                           names_to = 'variable', values_to = 'value') # Pivot longer with metadata_cols as identifier\nhead(mtcars_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  car       variable  value\n  <chr>     <chr>     <dbl>\n1 Mazda RX4 mpg       21   \n2 Mazda RX4 cyl        6   \n3 Mazda RX4 disp     160   \n4 Mazda RX4 hp       110   \n5 Mazda RX4 drat       3.9 \n6 Mazda RX4 wt         2.62\n```\n\n\n:::\n\n```{.r .cell-code}\n# Data is now in long format - the variable name is contained in the variable column, and the data value is contained in the value column\n\n# pivot back to wide format\npivot_wider(mtcars_long, names_from = variable, values_from = value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 12\n   car           mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# ggplot typically requires long format data, whereas something like apply may require wide format data\n```\n:::\n\n\n\n\n\n\n## Pipes\n\nThe `%>%` operator is a special operator which can be used to chain multiple functions together. These chains are known as pipes. Pipes are very useful when combined with various `tidyverse` functions in order to quickly and easily summarize data and run calculations on data frames. This is a very powerful data analysis tool, which has essentially replaced `apply()` for many people. Take a look at some of the examples below.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr pipes\n# The %>% operator in dplyr/tidyr passes data to the next function\n\n# filter filters logicals, similar to indexing\nmtcars_long %>% filter(variable == 'cyl')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 3\n   car               variable value\n   <chr>             <chr>    <dbl>\n 1 Mazda RX4         cyl          6\n 2 Mazda RX4 Wag     cyl          6\n 3 Datsun 710        cyl          4\n 4 Hornet 4 Drive    cyl          6\n 5 Hornet Sportabout cyl          8\n 6 Valiant           cyl          6\n 7 Duster 360        cyl          8\n 8 Merc 240D         cyl          4\n 9 Merc 230          cyl          4\n10 Merc 280          cyl          6\n# ℹ 22 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# This is the same as:\nfilter(mtcars_long, variable == 'cyl')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 3\n   car               variable value\n   <chr>             <chr>    <dbl>\n 1 Mazda RX4         cyl          6\n 2 Mazda RX4 Wag     cyl          6\n 3 Datsun 710        cyl          4\n 4 Hornet 4 Drive    cyl          6\n 5 Hornet Sportabout cyl          8\n 6 Valiant           cyl          6\n 7 Duster 360        cyl          8\n 8 Merc 240D         cyl          4\n 9 Merc 230          cyl          4\n10 Merc 280          cyl          6\n# ℹ 22 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# %>% operators can be chained together\n# summarize calculates statistics\nmtcars_long %>% filter(variable == 'cyl') %>%\n  summarize(mean = mean(value))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   mean\n  <dbl>\n1  6.19\n```\n\n\n:::\n\n```{.r .cell-code}\n# This code filters to cyl and then calculates the mean\n\n# mutate adds columns\nmtcars_long %>% filter(variable == 'cyl') %>%\n  summarize(mean = mean(value)) %>%\n  mutate(stat = 'mean')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n   mean stat \n  <dbl> <chr>\n1  6.19 mean \n```\n\n\n:::\n\n```{.r .cell-code}\n# group_by groups by an identifying column or set of identifying columns for all subsequent actions\nmtcars_long %>% group_by(variable) %>% # Groups the data by variable\n  summarize(mean = mean(value), sd = sd(value), n = n()) %>% # Calculates mean, standard deviation, and n() for each variable\n  filter(variable != 'cyl') %>% # removes rows where variable == cyl\n  mutate(data_is = 'cars', CV = (sd/mean)*100) %>% # Adds a column that says data is from cars, and another column that calculates the CV\n  select(data_is, variable, CV) # Select chooses and reorders requested columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n   data_is variable    CV\n   <chr>   <chr>    <dbl>\n 1 cars    am       123. \n 2 cars    carb      57.4\n 3 cars    disp      53.7\n 4 cars    drat      14.9\n 5 cars    gear      20.0\n 6 cars    hp        46.7\n 7 cars    mpg       30.0\n 8 cars    qsec      10.0\n 9 cars    vs       115. \n10 cars    wt        30.4\n```\n\n\n:::\n\n```{.r .cell-code}\n#####################################################################################\n##### I hope you have enjoyed this tutorial on the basics of R.\n##### I also hope that you take the journey to learn R, or other programming language.\n##### Let me know if I can help out.\n####################################################################################\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}