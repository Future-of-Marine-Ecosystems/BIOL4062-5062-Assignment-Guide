{
  "hash": "f8e29c1d2c571b769c51db8c25d7639a",
  "result": {
    "engine": "knitr",
    "markdown": "# R Refresher Part 6: Summarizing and Visualizing Data\n\n***Created by Mauricio Cantor, with modifications by Laura J. Feyrer, Ana Eguiguren, and Reid Steele***\n\nThis section covers basic summary statistics and plotting.\n\n*NOTE:* On refresher pages, some code lines will be commented out to avoid file structure issues surrounding saving files, downloading packages, and changing working directories.\n\n## Viewing and summarizing data\n\nBase R contains a variety of functions for examining and summarizing data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 6. Summarizing and visualizing data -------------------------------------------------------\n\n# Basic functions for summarizing your data\n# This are the basic functions to explore your data. Their names are pretty self-explanatory: \n# mean(), var(), sd(), min(), max(), range(), sum(). \n# They operate in the entire object\n\nnum_vector <- rnorm(50, mean = 20, sd = 10)\nnum_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 19.3827590 15.3615014 42.2062728 28.6556675 39.9319400 27.0582816\n [7] 14.9888646 22.2283281  7.1716642 16.7645564 20.1103360 35.7380876\n[13] 21.4262599 19.9876690 20.4537753 26.6341665 12.3233295 36.8295804\n[19]  3.4798000 28.6062937 26.1920732 17.9435729 19.4967718 39.7140566\n[25] 17.2866603 10.2791705 19.2102070  8.2757061 28.4318737 12.8765648\n[31] 19.1171651 12.3986905 13.8559217 30.7090330  5.7632458 -0.2397478\n[37] 27.6783829 23.1176770 36.2734982  8.2406331 22.6685706  6.3728882\n[43] 21.4142009 23.7878705 13.2856378 19.6507817 12.6981731  7.2270723\n[49] 23.8792579 38.5203833\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(num_vector) # the basics all together\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-0.2397 12.9788 19.8192 20.5093 26.9523 42.2063 \n```\n\n\n:::\n\n```{.r .cell-code}\nmean(num_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.5093\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(num_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19.81923\n```\n\n\n:::\n\n```{.r .cell-code}\nvar(num_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 104.6843\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(num_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.23154\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(num_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.2397478\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(num_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 42.20627\n```\n\n\n:::\n\n```{.r .cell-code}\nrange(num_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.2397478 42.2062728\n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(num_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        0%        25%        50%        75%       100% \n-0.2397478 12.9788330 19.8192254 26.9522528 42.2062728 \n```\n\n\n:::\n\n```{.r .cell-code}\nIQR(num_vector) # inter quarter range\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.97342\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(num_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1025.465\n```\n\n\n:::\n\n```{.r .cell-code}\ncumsum(num_vector) # cumulative sum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   19.38276   34.74426   76.95053  105.60620  145.53814  172.59642\n [7]  187.58529  209.81362  216.98528  233.74984  253.86017  289.59826\n[13]  311.02452  331.01219  351.46596  378.10013  390.42346  427.25304\n[19]  430.73284  459.33913  485.53121  503.47478  522.97155  562.68561\n[25]  579.97227  590.25144  609.46165  617.73735  646.16923  659.04579\n[31]  678.16296  690.56165  704.41757  735.12660  740.88985  740.65010\n[37]  768.32848  791.44616  827.71966  835.96029  858.62886  865.00175\n[43]  886.41595  910.20382  923.48946  943.14024  955.83841  963.06548\n[49]  986.94474 1025.46513\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Apply\n\nThe family of `apply()` functions is designed to apply functions across the rows/columns of a matrix/data frame. They are a little old school nowadays (as opposed to the hip new tidyverse pipes covered in section 9), but consider using them in your workflows if they make sense to you. A lot of coding is about finding your own style.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hint: the function 'apply()' is a nice way to \n#apply any kind of function to parts of you data frame, \n#matrix, array. It basically work like this:\n# apply(X, MARGIN, FUN), where X is the object; \n#MARGIN is 1(row) or 2(column); and FUN is the function \n?apply # to explore examples \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nstarting httpd help server ... done\n```\n\n\n:::\n\n```{.r .cell-code}\nmy_matrix1 <-  matrix(1:6, 2, 3, byrow = T)# data, rows, columns\nmy_matrix1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n\n\n:::\n\n```{.r .cell-code}\napply(my_matrix1, MARGIN=1, FUN=mean) # mean values for each row\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 5\n```\n\n\n:::\n\n```{.r .cell-code}\napply(my_matrix1, MARGIN=2, FUN=mean) # mean values for each column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.5 3.5 4.5\n```\n\n\n:::\n\n```{.r .cell-code}\nscho <- read.csv(\"Schoenemann.csv\", header=T)\n\n# Exploring factor data with tapply\nscho # this is the csv data we imported from the Schoenemann dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Order           Family         Genus        Species Location    Mass\n1    Carnivora          Felidae         Felis     canadensis   Alaska 7688.00\n2    Carnivora          Felidae         Felis          rufus Virginia 6152.00\n3    Carnivora       Mustelidae          Gulo         luscus   Alaska 9362.00\n4    Carnivora       Mustelidae       Mustela        erminea   Alaska  183.30\n5    Carnivora       Mustelidae       Mustela          vison Virginia 1032.00\n6    Carnivora       Proyonidae       Procyon          lotor Virginia 6040.00\n7   Chiroptera       Molossidae      Molossus          major   Brazil   11.07\n8   Chiroptera   Phyllostomidae      Artibeus    jamaicensis   Brazil   40.47\n9   Chiroptera   Phyllostomidae      Artibeus      lituratus   Brazil   63.65\n10  Chiroptera   Phyllostomidae   Glossophaga       soricina   Brazil    7.22\n11  Chiroptera   Phyllostomidae  Phyllostomus       discolor   Brazil   34.37\n12  Chiroptera   Phyllostomidae  Phyllostomus       hastatus   Brazil   92.26\n13  Chiroptera   Phyllostomidae      Sturnira         lilium   Brazil   15.39\n14  Chiroptera   Phyllostomidae     Vampyrops       lineatus   Brazil   22.03\n15  Chiroptera Vespertilionidae     Eptesicus         fuscus Virginia   17.88\n16    Edentata      Dasypodidae    Euphractos     sexcinctus   Brazil 2459.00\n17 Insectivora         Talpidae      Scalopus      aquaticus Virginia   44.64\n18  Lagomorpha      Ochotonidae      Ochotona       collaris   Alaska  120.90\n19 Marsupialia     Didelphiidae     Didelphis    marsupialis Virginia 1411.00\n20    Primates  Calllitrichidae    Callithrix        jacchus   Brazil  186.00\n21    Rodentia       Castoridae        Castor     canadensis Virginia 9331.00\n22    Rodentia       Cricetidae Clethrionomys        gapperi Virginia   18.34\n23    Rodentia       Cricetidae Clethrionomys        rutilus   Alaska   25.27\n24    Rodentia       Cricetidae        Lemmus  trimucronatus   Alaska   41.62\n25    Rodentia       Cricetidae      Microtus pennsylvanicus Virginia   31.38\n26    Rodentia       Cricetidae      Microtus      oeconomus   Alaska   24.83\n27    Rodentia       Cricetidae      Microtus      pinetorum Virginia   19.41\n28    Rodentia       Cricetidae       Ondatra      zibethica Virginia 1180.00\n29    Rodentia       Cricetidae      Oryzomys      palustris Virginia   61.62\n30    Rodentia       Cricetidae    Peromyscus       leucopus Virginia   16.99\n31    Rodentia      Cuniculidae     Cuniculus           paca   Brazil 1565.00\n32    Rodentia    Dasyproctidae    Dasyprocta          aguti   Brazil 2097.00\n33    Rodentia   Erethizontidae     Erethizon       dorsatum Virginia 5339.00\n34    Rodentia          Muridae           Mus       musculus Virginia   15.88\n35    Rodentia        Sciuridae      Citellus      undulatus   Alaska  479.00\n36    Rodentia        Sciuridae       Marmota       caligata   Alaska 3558.00\n37    Rodentia        Sciuridae       Marmota          monax   Alaska 2194.00\n38    Rodentia        Sciuridae       Sciurus   carolinensis Virginia  499.00\n39    Rodentia        Sciuridae  Tamiasciurus     hudsonicus   Alaska  192.80\n       Fat    FFWT    CNS HEART  MUSCLE   BONE\n1  1120.00 6568.00 105.09 27.59 4341.45 631.18\n2   738.00 5414.00  81.75 25.45 3600.31 552.23\n3   562.00 8800.00  85.36 80.96 5271.20 879.12\n4     3.10  180.20   6.69  1.87  104.70  21.98\n5    66.00  966.00  18.06  7.63  581.53  80.27\n6  1013.00 5027.00  58.31 36.19 2920.69 517.78\n7     0.22   10.89   0.35  0.15    5.51   1.36\n8     3.79   36.18   0.96  0.47   18.02   4.48\n9     6.22   57.19   1.21  0.74   29.05   8.09\n10    0.25    7.15   0.37  0.10    3.86   0.69\n11    2.38   32.20   1.00  0.36   16.49   3.87\n12    5.41   87.05   2.10  0.89   47.01  11.75\n13    1.21   14.25   0.62  0.16    6.33   2.04\n14    1.59   20.24   0.76  0.24   10.59   2.23\n15    1.51   16.37   0.32  0.19    7.43   2.26\n16  252.20 2123.00  19.32 12.95  864.06 269.20\n17    1.23   43.41   1.01  0.34   21.88   5.30\n18    7.00  113.90   3.06  0.73   57.18  11.32\n19  107.00 1304.00   7.56  7.56  681.99 203.42\n20    8.70  176.20   7.56  1.22   87.92  26.69\n21  865.00 8466.00  53.34 27.94 4622.44 897.40\n22    0.14   18.20   0.64  0.13    9.25   2.22\n23    0.72   24.55   0.60  0.19   11.34   1.94\n24    0.75   40.87   1.03  0.28   19.94   3.82\n25    1.20   30.18   0.76  0.26   14.46   2.59\n26    0.45   24.38   0.67  0.19   11.12   2.44\n27    0.45   18.96   0.57  0.15    9.46   1.86\n28   86.00 1094.00   7.11  3.50  679.37 115.96\n29    7.88   53.74   1.11  0.34   26.92   5.33\n30    0.59   16.40   0.61  0.17    8.02   1.49\n31  196.50 1368.00  29.00  7.80  737.35 140.90\n32  263.40 1833.80  25.86 13.94 1115.13 168.53\n33  674.00 4725.00  37.80 24.10 2197.13 576.45\n34    0.96   14.92   0.48  0.15    7.07   1.22\n35   21.00  458.00   6.00  2.56  257.85  38.01\n36  749.00 2809.00  20.37 16.57 1671.36 257.02\n37  536.50 1657.50  12.73  8.11  817.13 149.49\n38   11.00  488.00   8.88  2.83  306.46  51.73\n39    3.80  189.00   5.50  1.68  114.16  18.16\n```\n\n\n:::\n\n```{.r .cell-code}\n# available in the course excel files\n# the function 'tapply()' is the right tool for the job:\n# tapply(X, INDEX, FUN); same as before, but now INDEX \n# is the factor\n\n#first, transform into factors\nscho$Location_f <- factor(scho$Location)\nscho$Order_f <- factor(scho$Order)\n\n\n\ntapply(scho$Fat, INDEX = scho$Location_f, FUN=mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Alaska   Brazil Virginia \n273.1200  61.8225 223.3725 \n```\n\n\n:::\n\n```{.r .cell-code}\n# or the standard deviation of Fat..\ntapply(scho$Fat, INDEX = scho$Location_f, FUN=sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Alaska   Brazil Virginia \n399.8816 106.9835 365.0005 \n```\n\n\n:::\n\n```{.r .cell-code}\n# and so on\n\n# Hint: Contingency tables - the 'table()' function\n# also indicates how many samples/category\n\ntable(scho$Location_f) #This is particularly useful for plotting (see below)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  Alaska   Brazil Virginia \n      11       12       16 \n```\n\n\n:::\n\n```{.r .cell-code}\ntable(scho$Location_f, scho$Order_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          \n           Carnivora Chiroptera Edentata Insectivora Lagomorpha Marsupialia\n  Alaska           3          0        0           0          1           0\n  Brazil           0          8        1           0          0           0\n  Virginia         3          1        0           1          0           1\n          \n           Primates Rodentia\n  Alaska          0        7\n  Brazil          1        2\n  Virginia        0       10\n```\n\n\n:::\n\n```{.r .cell-code}\n# this is even more useful when we have MORE than one category!!\n```\n:::\n\n\n\n\n\n\n## Base R Plotting\n\nBase R contains a variety of functions that can be used for plotting, see some examples below. R plots work a bit like building blocks. Once you generate a plot, you can use successive functions to add more elements onto the plot.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 6b. Basic plotting  ------------------\n\n# Let's cover the very basics of plotting in R: again, \n# we create objects, use functions and voilá!\n# We will not cover formatting details. \n# It's a bit of work to get a nice plot in R (by nice plot I mean one ready for publication). \n# Again, it's worthy anyway, because we get a script to generate the figure as many times you wish later. And you can share the code (or reuse it later)\n\n# Histograms and barplots: frequency\nhist(scho$Fat)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nhist(scho$Fat, breaks=20) # a little more detail\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nhist(scho$Mass, breaks=20) # a little more detail\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-3.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Barplots for number of cases\nbarplot(table(scho$Location_f))\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-4.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Scatterplots (x vs y)\nplot(scho$Fat, scho$Mass) # plot where x = Fat, y = Mass\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-5.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplot(scho$Mass ~ scho$Fat) # plot where x = Fat, y = Mass too\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-6.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nscatter.smooth(scho$Mass ~ scho$Fat) # add a trend line\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-7.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Basic formatting\nplot(scho$Fat, scho$Mass, col = \"blue\", cex = 1, pch = 3)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-8.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# col = color (numbers or names, google options)\n# cex = relative size\n# pch = type of point - PLAY withe the options\n\nlevels(scho$Order_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Carnivora\"   \"Chiroptera\"  \"Edentata\"    \"Insectivora\" \"Lagomorpha\" \n[6] \"Marsupialia\" \"Primates\"    \"Rodentia\"   \n```\n\n\n:::\n\n```{.r .cell-code}\n# add only carnivores to see if there's a pattern\nplot(scho$Fat[which(scho$Order_f == \"Carnivora\")], \n     scho$Mass[which(scho$Order_f == \"Carnivora\")], \n     col = 2, cex = 1, pch = 19)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-9.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# if I want this to go over my previous graph, \n# I can add points\nplot(scho$Fat, scho$Mass, col = 1, cex = 1, pch = 19)\npoints(scho$Fat[which(scho$Order_f == \"Carnivora\")], \n     scho$Mass[which(scho$Order_f == \"Carnivora\")], \n     col = 2, cex = 1, pch = 19)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-10.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Color points by category\nplot(scho$Fat, \n     scho$Mass, col = scho$Order_f, cex = 1, pch = 19)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-11.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n#turns each factor level into a number that corresponds to a color\n\n# Box plot\nboxplot(scho$Mass)#one variable (numerical)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-12.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nboxplot(scho$Mass ~ scho$Location_f)# One numerical variable as a function of a categorical variable\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-13.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n?boxplot\n\n# Density plots\nplot(density(scho$Fat))\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-3-14.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n## ggplot2\n\nAlternatively, ggplot2 is a plotting package which is part of the tidyverse family that is designed to build plots more quickly (and ideally, prettily). Base plot and ggplot2 is very much a stylistic difference - you can (and should experiment with) build the same plots in either, but you may have a preference one way or the other. ggplot2 is generally more restrictive than R base plot, which can be frustrating in some cases, but may also be beneficial in others, as it can prevent you from making certain mistakes (e.g. mixing up your data and your legend).\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 6 BONUS ~~~ Brief intro to ggplot----\n# taken and modified from Rebecca Barter:\n# URL: http://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial/\n\n# 1. install & upload package\n# installl.packages(\"ggplot2\")\nlibrary(ggplot2)#first install this package\n\n# 2. BONUS! you can upload data directly\ngapminder <- read.csv(\"https://raw.githubusercontent.com/zief0002/miniature-garbanzo/main/data/gapminder.csv\")\n# this will fail if you are not connected to internet though\n\n# 3. see what is in there\nhead(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              country   region income income_level life_exp   co2 co2_change\n1         Afghanistan     Asia   2.03      Level 1     62.7 0.254   increase\n2             Albania   Europe  13.30      Level 3     78.4 1.590   increase\n3             Algeria   Africa  11.60      Level 3     76.0 3.690   increase\n4             Andorra   Europe  58.30      Level 4     82.1 6.120   decrease\n5              Angola   Africa   6.93      Level 2     64.6 1.120   decrease\n6 Antigua and Barbuda Americas  21.00      Level 3     76.2 5.880   increase\n  population\n1    37.2000\n2     2.8800\n3    42.2000\n4     0.0770\n5    30.8000\n6     0.0963\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t193 obs. of  8 variables:\n $ country     : chr  \"Afghanistan\" \"Albania\" \"Algeria\" \"Andorra\" ...\n $ region      : chr  \"Asia\" \"Europe\" \"Africa\" \"Europe\" ...\n $ income      : num  2.03 13.3 11.6 58.3 6.93 21 22.7 12.7 49 55.3 ...\n $ income_level: chr  \"Level 1\" \"Level 3\" \"Level 3\" \"Level 4\" ...\n $ life_exp    : num  62.7 78.4 76 82.1 64.6 76.2 76.5 75.6 82.9 82.1 ...\n $ co2         : num  0.254 1.59 3.69 6.12 1.12 5.88 4.41 1.89 16.9 7.75 ...\n $ co2_change  : chr  \"increase\" \"increase\" \"increase\" \"decrease\" ...\n $ population  : num  37.2 2.88 42.2 0.077 30.8 0.0963 44.4 2.95 24.9 8.89 ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. Start plot:\n# ggplots are built in layers, to which you add elements\n# the first bit is a \"canvas\" that holds the x and y axis\n\nggplot(gapminder, aes(x = income, y = life_exp))\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# we are telling the function to use the \"gapminder dataset\"\n# and to draw the x axis based on gdp/capita and y axis as life expectancy\n# but this is still a blank canvas\n\n# 5. Populate plot \n# start adding things by following your \"canvas function\" by a\n# + sign:\np<- ggplot(gapminder, aes(x = income, y = life_exp)) +\n  geom_point() # add a points layer on top\n\n\n# 6. Make things easier to see\n\n# you can modify the format of your points by adding \n# specifications within  gemo_point() \n# alpha = transparency (0 - 1)\n# col = color (explore RColor Palettes for options)\n# size = point size\n\np +\n  geom_point(alpha = 0.5, col = \"cornflowerblue\", size = 0.5)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# you can also color each point by a category:\n# here, because we are plotting color based on a variabe, we\n# add it to the aes() input\n# so that now points are colored by continent\n\nggplot(gapminder, aes(x = income, y = life_exp, color = region)) +\n  geom_point(alpha = 0.5, size = 0.7)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-3.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# you can also modify the size of points based on a variable\n# so that bigger points show larger populations\n\nggplot(gapminder, aes(x = income, y = life_exp, , color = region, \n                      size = population)) +\n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-4.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# To make things easier to see, we will look at\n# only one year at a time\n\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\n# the dplyr package allows another way to access\n# bits of your data\n# this can be read as:\n# First, take \"gapminder\" data and THEN\n# filter out data for the americas\ngapminder_Am <- gapminder %>% filter(region == \"Americas\")\nsummary(gapminder_Am)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   country             region              income      income_level      \n Length:35          Length:35          Min.   : 3.17   Length:35         \n Class :character   Class :character   1st Qu.:10.62   Class :character  \n Mode  :character   Mode  :character   Median :14.70   Mode  :character  \n                                       Mean   :18.02                     \n                                       3rd Qu.:21.85                     \n                                       Max.   :61.60                     \n    life_exp          co2          co2_change          population      \n Min.   :63.50   Min.   : 0.270   Length:35          Min.   :  0.0524  \n 1st Qu.:72.85   1st Qu.: 1.850   Class :character   1st Qu.:  0.4810  \n Median :75.50   Median : 2.460   Mode  :character   Median :  6.4700  \n Mean   :75.24   Mean   : 4.204                      Mean   : 28.5978  \n 3rd Qu.:77.00   3rd Qu.: 4.445                      3rd Qu.: 17.9500  \n Max.   :82.20   Max.   :31.300                      Max.   :327.0000  \n```\n\n\n:::\n\n```{.r .cell-code}\n# first we replicate our previous plot\n# it is now a bit easier to see patterns\n\nggplot(gapminder_Am, aes(x = income, y = life_exp, color = co2_change , size = population)) +\n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-5.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# because there is so much variation in income, it \n# may be easier to see it in a logarithmic scale\n\nggplot(gapminder_Am, aes(x = income, y = life_exp, color = co2_change , size = population)) +\n  geom_point(alpha = 0.5) +\n  scale_x_log10()# this prints the x axis in a log10\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-6.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# you can now add more informative titles using the\n# + labs() element\n\nggplot(gapminder_Am, aes(x = income, y = life_exp, color = co2_change , size = population)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"Income versus life expectancy in the Americas\",\n       x = \"Income per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"CO2 chage\")\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-7.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# and make things prettier by adding the\n# + themes() options\nggplot(gapminder_Am, aes(x = income, y = life_exp, color = co2_change , size = population)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"Income versus life expectancy in the Americas\",\n       x = \"Income per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"CO2 chage\")+\n       theme_classic()\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-8.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# add labels!\n# I want to know where Ecuador fits here\nggplot(gapminder_Am, aes(x = income, y = life_exp, color = co2_change , size = population)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"Income versus life expectancy in the Americas\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\")+\n       theme_classic() +\n    geom_text( \n    data=gapminder_Am %>% filter(country == \"Ecuador\"), \n    # Filter data first\n    aes(label=country))\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-9.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# save your plot \n# first put it in an object:\np <- ggplot(gapminder_Am, aes(x = income, y = life_exp, color = co2_change , size = population)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"Income versus life expectancy in 2007\",\n       x = \"Income per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\")+\n       theme_classic() +\n    geom_text( \n    data=gapminder_Am %>% filter(country == \"Ecuador\"), \n    # Filter data first\n    aes(label=country))\n  \n\n\nplot(p)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-10.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# # Save a plot\n# ggsave(\"Graphical_outputs/beautiful_plot.png\", p, \n#        dpi = 500, width = 10, height = 10)\n\n\n\n# you can also overlap things:\n# here, we have the initial point graph + a smoother line\nggplot(gapminder_Am, aes(x = income, y = life_exp, color = co2_change , size = population)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(se = FALSE, method = \"loess\", color = \"grey30\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\ni Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The following aesthetics were dropped during statistical transformation: size.\ni This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\ni Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-11.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# 7.b Different types of plots\n# instead of points, you can create a line plot\n# (note how contents in the aes() change)\nggplot(gapminder, aes(x = income, y = life_exp,\n                      color = region)) +\n  geom_line(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-12.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# a boxplot\n# (try replacing \"fill\" by \"col\")\nggplot(gapminder, aes(x = region, y = co2, \n                      fill = region)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-13.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# a histogram\n# explore modifying the bindwidth\n\nggplot(gapminder, aes(x = co2)) + \n  geom_histogram(binwidth =10)\n```\n\n::: {.cell-output-display}\n![](refresher_6_files/figure-pdf/unnamed-chunk-4-14.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "refresher_6_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}