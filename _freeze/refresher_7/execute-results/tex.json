{
  "hash": "d53eeea4785c482549bbfa718bab25bc",
  "result": {
    "engine": "knitr",
    "markdown": "# R Refresher Part 7: Linear Modelling\n\n## Created by Mauricio Cantor, with modifications by Laura J. Feyrer, Ana Eguiguren, and Reid Steele\n\nThis section covers basic linear modelling in R.\n\n*NOTE:* On refresher pages, some code lines will be commented out to avoid file structure issues surrounding saving files, downloading packages, and changing working directories.\n\n## Running linear models\n\nLinear modelling in R is done through the `lm()` function. The `lm()` function requires an x/y formula and data, which can be supplied directly via x/y vectors or through the data frame containing the data. Printing `lm()` and `summary(lm())` prints various results of interest from the model.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 7. Linear models in R (the basics) --------------------------------------\n\n# This is a VERY BASIC introduction to models in R. The idea here is just to illustrate how we create models, explore and plot them. We will cover statistical and biological details in the next classes and tutorials.\n# Basically, here we will repeat the same steps of our recipe: create an object, explore it with indexing tools, apply few functions.\n\n# we already have our data to work with.\n# Let's take a look in the function 'lm()' for linear models\nhelp(lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nstarting httpd help server ... done\n```\n\n\n:::\n\n```{.r .cell-code}\n# Basically we need a formula and data. \n# Here's another way of getting data that is associated\n\n# # with a package:\n# install.packages(\"agridat\")\n\n# if slow connection try running : options(timeout = 400)\n\nlibrary(agridat)#this package has many datasets from agriculture\n?agridat #shows all different datasets\n?lord.rice.uniformity # gives details for this dataset\n\n\n\ndata(\"lord.rice.uniformity\")\nhead(lord.rice.uniformity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  field row col grain straw\n1    10   1   1   9.2  12.2\n2    10   1   2   8.4  11.7\n3    10   1   3   8.5  12.5\n4    10   1   4   9.2  12.0\n5    10   1   5   8.0  12.2\n6    10  10   1   9.2  10.2\n```\n\n\n:::\n\n```{.r .cell-code}\n#lets give it a shorter name to make our life easier\nrice <- lord.rice.uniformity\n\n#Let's pretend we are interested in the linear \n#relationship between straw weight and grain weight\n\nlm(grain ~ straw, data = rice)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = grain ~ straw, data = rice)\n\nCoefficients:\n(Intercept)        straw  \n     0.5103       0.6731  \n```\n\n\n:::\n\n```{.r .cell-code}\n# What do we have? The estimates for the linear function \n# parameters (intercept and slope)\n# if we save this model as an object:\nrice_mod <- lm(rice$grain ~ rice$straw) # RS Note: This is the same as lm(grain ~ straw, data = rice)\n\n# now we can take a look in other details:\nsummary(rice_mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = rice$grain ~ rice$straw)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.3147 -0.6476  0.1738  0.8877  3.2412 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.51027    0.21608   2.361   0.0185 *  \nrice$straw   0.67313    0.02382  28.262   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.212 on 558 degrees of freedom\nMultiple R-squared:  0.5887,\tAdjusted R-squared:  0.588 \nF-statistic: 798.7 on 1 and 558 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nanova(rice_mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: rice$grain\n            Df  Sum Sq Mean Sq F value    Pr(>F)    \nrice$straw   1 1173.22 1173.22  798.73 < 2.2e-16 ***\nResiduals  558  819.62    1.47                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Good! We got the same estimates but with t-tests, \n# R^2, Residual standard error, F-test and more..\n# you can also explore these by calling them directly:\nrice_mod$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)  rice$straw \n  0.5102717   0.6731326 \n```\n\n\n:::\n\n```{.r .cell-code}\nrice_mod$residuals\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           1            2            3            4            5            6 \n 0.477510692  0.014076986 -0.424429084  0.612137209 -0.722489308  1.823775867 \n           7            8            9           10           11           12 \n 0.068101266  1.560342161  0.423775867 -0.022489308  2.321836091  0.958402385 \n          13           14           15           16           17           18 \n 1.121836091  1.260342161  1.558402385  0.948703503  1.260342161  2.131534972 \n          19           20           21           22           23           24 \n-0.524429084  0.521836091 -0.832188190  1.958402385  3.168101266  2.233474748 \n          25           26           27           28           29           30 \n 1.521836091  2.021836091  0.650643279  0.512137209 -0.149356721  0.585269797 \n          31           32           33           34           35           36 \n 1.212137209 -0.051296497  0.923775867  0.958402385  0.348703503  1.058402385 \n          37           38           39           40           41           42 \n 1.160342161  0.496908455  1.021836091 -0.214730203 -0.414730203  1.696908455 \n          43           44           45           46           47           48 \n 1.731534972  1.258402385  0.148703503  1.458402385  0.158402385  1.160342161 \n          49           50           51           52           53           54 \n-0.076224133 -0.014730203  1.385269797  1.594968678  1.668101266  0.558402385 \n          55           56           57           58           59           60 \n 0.923775867  1.521836091  1.996908455  1.094968678  0.660342161  1.358402385 \n          61           62           63           64           65           66 \n 0.485269797  0.760342161  0.860342161 -0.051296497 -0.187862791  1.721836091 \n          67           68           69           70           71           72 \n 0.770041042  1.896908455  0.385269797  0.448703503  0.177800147  0.231534972 \n          73           74           75           76           77           78 \n 0.158402385  1.241233853  0.060342161  3.241233853  1.477800147  1.479739924 \n          79           80           81           82           83           84 \n 0.504667560  1.868101266  0.958402385  0.668101266  1.568101266  1.114366441 \n          85           86           87           88           89           90 \n 1.421836091  1.460342161 -0.914730203  0.804667560  1.268101266 -0.214730203 \n          91           92           93           94           95           96 \n 0.923775867  0.931534972  0.794968678  1.431534972  0.821836091  1.058402385 \n          97           98           99          100          101          102 \n 0.831534972 -0.014730203  1.731534972  0.358402385  0.150932735  0.577800147 \n         103          104          105          106          107          108 \n-1.031898734  0.587499029  1.004667560  1.641233853  1.577800147  0.577800147 \n         109          110          111          112          113          114 \n 1.141233853  0.614366441 -0.168465028  1.477800147  1.879739924  0.804667560 \n         115          116          117          118          119          120 \n 1.014366441  1.006607336  0.631534972  0.841233853  0.668101266  1.070041042 \n         121          122          123          124          125          126 \n 1.404667560  1.677800147  0.941233853  1.031534972  0.558402385  1.631534972 \n         127          128          129          130          131          132 \n 1.443173630  0.968101266  1.531534972  1.333474748  0.048703503  0.770041042 \n         133          134          135          136          137          138 \n 1.668101266 -0.314730203  1.294968678 -0.987862791  0.668101266  1.094968678 \n         139          140          141          142          143          144 \n 0.731534972  1.296908455  1.170041042 -0.495332440  0.194968678  0.170041042 \n         145          146          147          148          149          150 \n-0.441597615  1.152872511 -2.495332440 -1.773994901 -3.603091545 -0.514730203 \n         151          152          153          154          155          156 \n 1.079739924 -1.075934678 -3.422199853 -1.722199853  1.768101266 -0.122199853 \n         157          158          159          160          161          162 \n-3.256826370 -3.249067265 -2.031898734  0.148703503 -1.103091545 -3.358766147 \n         163          164          165          166          167          168 \n-3.022199853 -1.468465028  1.458402385 -0.049067265 -0.631898734  0.223775867 \n         169          170          171          172          173          174 \n-0.151296497 -0.441597615  0.416306217 -0.573994901 -0.312500971  0.426005099 \n         175          176          177          178          179          180 \n-1.568465028 -0.093392664 -0.883693783 -1.537428608  0.014366441 -0.103091545 \n         181          182          183          184          185          186 \n-0.195332440 -0.239368384 -1.702802090  0.552872511  1.306607336  0.150932735 \n         187          188          189          190          191          192 \n-1.047127489 -0.993103209 -0.539368384  0.904667560  0.987499029 -1.610561195 \n         193          194          195          196          197          198 \n-1.302802090 -1.139368384  1.343173630  0.116306217 -1.647127489 -2.102802090 \n         199          200          201          202          203          204 \n-1.339368384  1.016306217  0.650643279 -2.049067265 -2.439368384 -2.312500971 \n         205          206          207          208          209          210 \n-0.358766147  1.243173630 -2.556826370 -2.883693783 -0.820260076  0.679739924 \n         211          212          213          214          215          216 \n-1.731898734 -2.203091545 -2.003091545 -2.166525252 -2.022199853 -1.631898734 \n         217          218          219          220          221          222 \n-1.714730203 -2.368465028 -0.668465028 -0.312790427 -1.858766147 -2.022199853 \n         223          224          225          226          227          228 \n-0.839368384 -1.531898734 -1.695332440  0.050932735 -1.949067265 -1.375934678 \n         229          230          231          232          233          234 \n-0.020260076 -1.705031322 -1.422199853 -1.968465028 -3.214730203 -1.585633559 \n         235          236          237          238          239          240 \n-1.814730203 -0.776224133 -0.941597615 -1.222489308 -2.387862791  1.704667560 \n         241          242          243          244          245          246 \n-0.073994901 -2.775934678 -0.975934678 -3.958766147  0.331534972 -2.512790427 \n         247          248          249          250          251          252 \n-2.447127489 -1.739368384 -1.522199853  0.414366441 -0.458766147 -0.537428608 \n         253          254          255          256          257          258 \n-0.756826370 -1.122199853 -1.975934678 -0.878163909 -1.575934678 -1.610561195 \n         259          260          261          262          263          264 \n-1.022199853 -1.868465028 -1.629958958 -2.047127489 -2.393392664 -1.310561195 \n         265          266          267          268          269          270 \n-2.895332440 -0.683693783 -2.175934678 -3.668465028 -1.275934678 -3.093392664 \n         271          272          273          274          275          276 \n-1.056826370 -1.383693783 -5.314730203 -1.247127489 -1.356826370 -1.031898734 \n         277          278          279          280          281          282 \n-1.495332440 -1.295332440  0.204667560 -1.849356721  0.460342161  0.323775867 \n         283          284          285          286          287          288 \n 0.012137209 -3.141887071 -0.503091545 -0.249356721 -0.476224133  0.743173630 \n         289          290          291          292          293          294 \n 0.458402385 -1.551296497 -0.487862791  0.494968678 -0.493392664 -1.651296497 \n         295          296          297          298          299          300 \n-1.932188190  0.321836091 -0.231898734 -0.131898734 -1.078163909 -1.387862791 \n         301          302          303          304          305          306 \n 0.658402385  1.677800147  0.594968678 -0.314730203 -1.487862791  0.521836091 \n         307          308          309          310          311          312 \n-1.060995378 -1.160995378 -1.797561672 -0.760995378  1.614366441  1.416306217 \n         313          314          315          316          317          318 \n 1.150932735 -1.068465028  0.870041042  0.533474748  0.404667560  0.150932735 \n         319          320          321          322          323          324 \n 0.068101266 -1.087862791  1.168101266  0.668101266  0.614366441  1.104667560 \n         325          326          327          328          329          330 \n-1.051296497  0.368101266  0.970041042  1.216306217 -0.141597615 -0.678163909 \n         331          332          333          334          335          336 \n 1.858402385 -0.005031322 -0.431898734 -1.422489308 -2.124429084  0.294968678 \n         337          338          339          340          341          342 \n 0.796908455  0.814366441  1.304667560 -0.041597615  0.970041042  0.394968678 \n         343          344          345          346          347          348 \n 1.014366441  1.033474748 -1.024429084  1.504667560  1.914366441  0.316306217 \n         349          350          351          352          353          354 \n 0.670041042  0.085269797 -1.124429084 -0.432188190  0.102438328  0.548703503 \n         355          356          357          358          359          360 \n 0.931534972  0.070041042  0.224065322 -0.212500971  0.350932735  0.714366441 \n         361          362          363          364          365          366 \n 0.904667560  0.614366441  0.714366441  0.177800147  0.741233853  0.158402385 \n         367          368          369          370          371          372 \n 1.041233853 -0.131898734  1.041233853 -0.129958958  1.168101266  1.216306217 \n         373          374          375          376          377          378 \n 1.114366441  1.314366441  1.504667560  0.431534972  0.968101266  0.623775867 \n         379          380          381          382          383          384 \n-1.058766147  0.968101266  1.185269797  0.294968678  0.368101266  1.341233853 \n         385          386          387          388          389          390 \n 1.368101266  0.748703503  0.531534972  0.304667560  1.141233853  0.221836091 \n         391          392          393          394          395          396 \n 1.150643279  0.094968678  0.404667560  0.914366441  0.906607336  1.023775867 \n         397          398          399          400          401          402 \n-0.229958958  0.477800147  0.189438805 -0.549067265  0.885269797  0.741233853 \n         403          404          405          406          407          408 \n-0.185633559 -0.649067265 -0.147127489  1.568101266  0.777800147 -0.385633559 \n         409          410          411          412          413          414 \n-0.647127489  0.150932735 -0.151296497  0.114366441 -0.083693783  0.387499029 \n         415          416          417          418          419          420 \n-1.178163909  0.368101266  0.360631616 -0.039368384 -0.083693783  0.514366441 \n         421          422          423          424          425          426 \n-0.431898734 -3.059055602 -3.705320777  0.758402385 -1.651296497  0.258402385 \n         427          428          429          430          431          432 \n 0.170041042  0.377800147 -0.095332440  0.831534972  0.660342161  0.333474748 \n         433          434          435          436          437          438 \n-0.158766147 -0.495332440  0.131534972 -0.549356721 -0.429958958 -1.531898734 \n         439          440          441          442          443          444 \n 0.804667560 -1.105031322  0.877800147 -0.112500971 -0.249067265 -0.285633559 \n         445          446          447          448          449          450 \n-0.695332440  1.304667560  0.631534972  0.104667560  0.577800147  0.341233853 \n         451          452          453          454          455          456 \n-2.176224133 -0.566525252 -2.312790427 -0.229958958  0.368101266  0.233474748 \n         457          458          459          460          461          462 \n 0.831534972  0.494968678 -1.031898734 -2.314730203  0.996908455 -0.266525252 \n         463          464          465          466          467          468 \n 0.094968678  0.170041042  0.894968678  0.158402385 -0.441597615 -1.051296497 \n         469          470          471          472          473          474 \n 0.570041042  0.487209573 -0.241597615 -1.005031322 -0.568465028 -0.478163909 \n         475          476          477          478          479          480 \n-0.449356721  0.468101266  0.533474748  1.214366441  0.643173630  0.596908455 \n         481          482          483          484          485          486 \n-0.368465028  0.068101266  0.314366441  0.804667560  0.948703503  0.470041042 \n         487          488          489          490          491          492 \n-0.168465028  0.304667560 -0.541597615  0.548703503 -0.660995378 -1.660995378 \n         493          494          495          496          497          498 \n-0.887862791 -0.887862791  0.214076986  0.112137209  1.331534972  0.950932735 \n         499          500          501          502          503          504 \n-1.151296497  1.768101266 -0.287862791  0.394968678  0.114366441  0.058402385 \n         505          506          507          508          509          510 \n 0.094968678  0.112137209 -0.141597615  0.450932735 -0.814730203  0.931534972 \n         511          512          513          514          515          516 \n-0.251296497 -0.195332440 -0.595332440 -1.551296497  0.631534972 -0.014730203 \n         517          518          519          520          521          522 \n-0.114730203  0.085269797  1.177800147  1.104667560  0.987209573  1.368101266 \n         523          524          525          526          527          528 \n 0.804667560  1.294968678  1.323775867 -0.151296497  0.323775867 -0.566525252 \n         529          530          531          532          533          534 \n-1.487862791  0.150643279  0.987209573  0.287209573  1.041233853 -0.651296497 \n         535          536          537          538          539          540 \n 0.387209573 -0.124429084  0.012137209  0.204667560 -0.560995378 -1.224429084 \n         541          542          543          544          545          546 \n 0.177510692 -0.487862791  0.531534972 -0.087862791  0.285269797  0.785269797 \n         547          548          549          550          551          552 \n 0.885269797  0.004667560  0.285269797  0.921836091  0.512137209 -0.114730203 \n         553          554          555          556          557          558 \n 0.041233853  0.233474748  0.685269797  1.150643279  0.012137209 -0.122199853 \n         559          560 \n 0.468101266  0.012137209 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Plotting linear models\n\nLinear models can be plotted in base R using the same syntax as `lm()`. You can add the regression line directly onto the plot using `abline(lm())`. In ggplot, you can use `stat_smooth()` or `geom_smooth()` with `method = 'lm'` to plot a linear model.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's see this things in a plot:\nplot(rice$grain ~ rice$straw, pch = 19, cex = 0.2)\n```\n\n::: {.cell-output-display}\n![](refresher_7_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Ok, we can do it a bit better:\nplot(rice$grain ~ rice$straw, pch = 19,  cex = 1,\n     ylab=\"grain weight (g)\", \n     xlab=\"straw weight (g)\",\n     main=\"linear model\")\n\n# adding the model\nabline(rice_mod, col = 2)# adds the linear function from the model\n# adding the equation\n\n\n#first \"write it\" (paste joins bits of characters)\n# y = mx + b\neqn <-paste(\"y=\", round(rice_mod$coefficients[2], 2),\n            \"x + \", round(rice_mod$coefficients[1], 2) )\ntext(3.9,9, eqn, cex = 0.6)# this adds text to the graph\n```\n\n::: {.cell-output-display}\n![](refresher_7_files/figure-pdf/unnamed-chunk-2-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# We can also take a look in the model premisses\nplot(rice_mod)# here you have to hit enter for new graphs to \n```\n\n::: {.cell-output-display}\n![](refresher_7_files/figure-pdf/unnamed-chunk-2-3.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output-display}\n![](refresher_7_files/figure-pdf/unnamed-chunk-2-4.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output-display}\n![](refresher_7_files/figure-pdf/unnamed-chunk-2-5.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output-display}\n![](refresher_7_files/figure-pdf/unnamed-chunk-2-6.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n#show up\n\npar(mfrow=c(2,2))\nplot(rice_mod)# here all graphs are plotted together\n```\n\n::: {.cell-output-display}\n![](refresher_7_files/figure-pdf/unnamed-chunk-2-7.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# ggplot\nlibrary(ggplot2)\nggplot(rice, aes(x = straw, y = grain)) + geom_point() + stat_smooth(method = 'lm')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](refresher_7_files/figure-pdf/unnamed-chunk-2-8.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# We can use other kinds of models \n#(e.g. General Linear models, Additive linear models etc). \n# they all mostly have similar formats to the basic lm()\n```\n:::\n",
    "supporting": [
      "refresher_7_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}